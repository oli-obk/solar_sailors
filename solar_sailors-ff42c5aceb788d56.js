let m=`undefined`,p=0,q=`function`,o=null,n=Error,t=Object,s=Object.getPrototypeOf,r=undefined;var l=(async(a)=>{if(b!==r)return b;if(typeof a!==m){if(s(a)===t.prototype){({module_or_path:a}=a)}else{console.warn(`using deprecated parameters for the initialization function; pass a single object instead`)}};if(typeof a===m){a=new URL(`solar_sailors_bg.wasm`,import.meta.url)};const c=h();if(typeof a===`string`||typeof Request===q&&a instanceof Request||typeof URL===q&&a instanceof URL){a=fetch(a)};i(c);const {instance:d,module:e}=await g(await a,c);return j(d,e)});var h=(()=>{const c={};c.wbg={};c.wbg.__wbindgen_init_externref_table=(()=>{const a=b.__wbindgen_export_0;const c=a.grow(4);a.set(p,r);a.set(c+ p,r);a.set(c+ 1,o);a.set(c+ 2,!0);a.set(c+ 3,!1)});c.wbg.__wbindgen_throw=((a,b)=>{throw new n(f(a,b))});c[`env`]=a;return c});var g=(async(a,b)=>{if(typeof Response===q&&a instanceof Response){if(typeof WebAssembly.instantiateStreaming===q){try{return await WebAssembly.instantiateStreaming(a,b)}catch(b){if(a.headers.get(`Content-Type`)!=`application/wasm`){console.warn(`\`WebAssembly.instantiateStreaming\` failed because your server does not serve Wasm with \`application/wasm\` MIME type. Falling back to \`WebAssembly.instantiate\` which is slower. Original error:\\n`,b)}else{throw b}}};const c=await a.arrayBuffer();return await WebAssembly.instantiate(c,b)}else{const c=await WebAssembly.instantiate(a,b);if(c instanceof WebAssembly.Instance){return {instance:c,module:a}}else{return c}}});var j=((a,c)=>{b=a.exports;l.__wbindgen_wasm_module=c;d=o;b.__wbindgen_start();return b});var e=(()=>{if(d===o||d.byteLength===p){d=new Uint8Array(b.memory.buffer)};return d});var k=(a=>{if(b!==r)return b;if(typeof a!==m){if(s(a)===t.prototype){({module:a}=a)}else{console.warn(`using deprecated parameters for \`initSync()\`; pass a single object instead`)}};const c=h();i(c);if(!(a instanceof WebAssembly.Module)){a=new WebAssembly.Module(a)};const d=new WebAssembly.Instance(a,c);return j(d,a)});var i=((a,b)=>{});var f=((a,b)=>{a=a>>>p;return c.decode(e().subarray(a,a+ b))});import*as a from"env";let b;const c=typeof TextDecoder!==m?new TextDecoder(`utf-8`,{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw n(`TextDecoder not available`)}};if(typeof TextDecoder!==m){c.decode()};let d=o;export default l;export{k as initSync}